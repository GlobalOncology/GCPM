(function(App) {

  'use strict';

  var basemapSpec = {
    main: {
      url: '<%= ENV["BASEMAP_URL"] %>',
      options: {}
    },
    secondary: {
      url: '<%= ENV["ALT_BASEMAP_URL"] %>',
      options: {}
    }
  };

  App.View.Map = Backbone.View.extend({

    defaults: {
      center: [0, 0],
      scrollWheelZoom: false,
      basemap: null,
      attributionControl: false,
      zoom: 3,
      maxZoom: 17,
      search: false
    },

    template: HandlebarsTemplates['carto_layer_tooltip'],

    initialize: function(settings) {
      var opts = (settings && settings.options) || {};
      this.options = _.extend({}, this.defaults, opts);

      if (!this.options.nocreate) this.createMap();

    },

    /**
     * Creating leaflet map
     */
    createMap: function() {
      this.map = L.map(this.el.id, this.options);
      this.setBasemap();
      if (this.options.search) {
        this.setSearchBox();
      }
      this.addListeners();
    },

    /**
     * Communicate map status
     * @return {[type]} [description]
     */
    getState: function() {
      var center = this.map.getCenter();
      return {
        zoom: this.map.getZoom(),
        lat: center.lat,
        lng: center.lng
      };
    },

    /**
     * Add basemap to map
     */
    setBasemap: function() {
      var basemapConfig = basemapSpec[this.options.basemap];
      if (!this.map || !(this.map instanceof L.Map)) {
        throw new Error('There isn\'t a valid map object');
      }
      if (this.basemap) {
        this.map.removeLayer(this.basemap);
      }
      if (this.options.basemap) {
        this.basemap = L.tileLayer(basemapConfig.url, basemapConfig.options);
        this.basemap.addTo(this.map);
      }
    },

    setSearchBox: function() {
      var input = $('#map-search-input')[0];

      this.autocomplete = new google.maps.places.Autocomplete(input, {
        types: ['geocode']
      });
      this.autocomplete.addListener('place_changed', this.onPlaceSelected.bind(this));
    },

    onPlaceSelected: function() {
      var place = this.autocomplete.getPlace();
      if (place !== undefined && place.geometry) {
        if (place.geometry.viewport) {
          console.log(place.geometry.viewport);
          this.map.fitBounds(place.geometry.viewport);
          if (place.geometry.location) {
            // this.addMarker(place.geometry.location.lat(), place.geometry.location.lng());
          }
        }

        if (place.geometry.location && !place.geometry.viewport) {
          this.map.panTo(place.geometry.location.lat(), place.geometry.location.lng());
          // this.addMarker(place.geometry.location.lat(), place.geometry.location.lng());
        }
      }
    },


    // setSearchBox: function() {
    //   var geocoder = new google.maps.Geocoder();
    //
    // 	function googleGeocoding(text, callResponse) {
    // 		geocoder.geocode({address: text}, callResponse);
    // 	}
    //
    // 	function formatJSON(rawjson) {
    // 		var json = {},
    // 			key, loc, disp = [];
    //
    // 		for(var i in rawjson) {
    // 			key = rawjson[i].formatted_address;
    //
    // 			loc = L.latLng( rawjson[i].geometry.location.lat(), rawjson[i].geometry.location.lng() );
    //
    // 			json[ key ]= loc;	//key,value format
    // 		}
    //
    // 		return json;
    // 	}
    //
    // 	new L.Control.Search({
  	// 		sourceData: googleGeocoding,
  	// 		formatData: formatJSON,
  	// 		markerLocation: true,
    //     marker: false,
    // 		autoType: true,
    //     autoCollapse: false,
    //     tipAutoSubmit: false,
    // 		minLength: 2,
    //     collapsed: false,
    //     initial: false,
    //     zoom: 15
  	// 	})
    //   .setPosition('topright')
    //   .addTo(this.map);
    // },

    /**
     * Listeners
     */
    addListeners: function() {
      this.map.on('zoomend', function(e){
        this.trigger('pan', e);
      }.bind(this));
      this.map.on('dragend', function(e){
        this.trigger('pan', e);
      }.bind(this));
    },

    removeListeners: function() {
      this.map.off('zoomend');
      this.map.off('dragend');
    },

    /**
     * Add layer on map
     * @param {Object} layerInstance A valid Leaflet layer
     */
    addLayer: function(layerInstance) {
      if (this.map && this.map instanceof L.Map) {
        this.map.addLayer(layerInstance);
      }
    },

    /**
     * Remove layer on map
     * @param {Object} layerInstance A valid Leaflet layer
     */
    removeLayer: function(layerInstance) {
      if (this.map && this.map instanceof L.Map) {
        this.map.removeLayer(layerInstance);
      }
    },

    addCartoTooltip: function(data) {
      L.popup()
        .setLatLng(data.latLng)
        .setContent(this.template(data))
        .openOn(this.map);
    }

  });

})(this.App);
